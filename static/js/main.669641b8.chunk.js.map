{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","_ref2","poster","alt","react_default","a","createElement","src","className","MovieGenre","_ref3","genre","Movie","_ref","title","genres","synopsis","map","index","key","lib_default","text","maxLine","ellipsis","trimRight","baseOn","App","state","_getMovies","_callee","movies","regenerator_default","wrap","_context","prev","next","_this","_callApi","sent","setState","stop","fetch","then","response","json","data","catch","err","console","log","_renderMovies","movie","src_Movie","title_english","small_cover_image","id","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wUA8BA,SAASA,EAATC,GAAoC,IAAdC,EAAcD,EAAdC,OAAQC,EAAMF,EAANE,IAC1B,OACIC,EAAAC,EAAAC,cAAA,OAAKC,IAAKL,EAAQC,IAAKA,EAAKK,UAAU,iBAI9C,SAASC,EAATC,GAA6B,IAARC,EAAQD,EAARC,MACjB,OACIP,EAAAC,EAAAC,cAAA,QAAME,UAAU,eAAeG,GAoBxBC,MArDf,SAAAC,GAAsD,IAApCC,EAAoCD,EAApCC,MAAOZ,EAA6BW,EAA7BX,OAAQa,EAAqBF,EAArBE,OAAQC,EAAaH,EAAbG,SACrC,OACIZ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,SACXJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,iBACXJ,EAAAC,EAAAC,cAACN,EAAD,CAAaE,OAAQA,EAAQC,IAAKW,KAEtCV,EAAAC,EAAAC,cAAA,OAAKE,UAAU,iBACXJ,EAAAC,EAAAC,cAAA,UAAKQ,GACLV,EAAAC,EAAAC,cAAA,OAAKE,UAAU,gBACVO,EAAOE,IAAI,SAACN,EAAOO,GAAR,OAAkBd,EAAAC,EAAAC,cAACG,EAAD,CAAYE,MAAOA,EAAOQ,IAAKD,OAEjEd,EAAAC,EAAAC,cAAA,KAAGE,UAAU,kBACTJ,EAAAC,EAAAC,cAACc,EAAAf,EAAD,CACIgB,KAAML,EACNM,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,OAAO,gBCqChBC,6MArDbC,MAAQ,KAMRC,gCAAa,SAAAC,IAAA,IAAAC,EAAA,OAAAC,EAAA1B,EAAA2B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACUC,EAAKC,WADf,OACLP,EADKG,EAAAK,KAEXF,EAAKG,SAAS,CACZT,OAAQA,IAHC,wBAAAG,EAAAO,SAAAX,QAObQ,SAAW,WACT,OAAOI,MAAM,iEACZC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKf,SACvBgB,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,QAG5BG,cAAgB,WAWd,OATgBd,EAAKT,MAAMG,OAAOb,IAAI,SAAAkC,GAEpC,OADAH,QAAQC,IAAIE,GACL/C,EAAAC,EAAAC,cAAC8C,EAAD,CAAOtC,MAAOqC,EAAME,cACbnD,OAAQiD,EAAMG,kBACdnC,IAAKgC,EAAMI,GACXxC,OAAQoC,EAAMpC,OACdC,SAAUmC,EAAMnC,oGAzBhCgC,QAAQC,IAAI,oEAgCZD,QAAQC,IAAI,qBAEZO,KAAK5B,8CAILoB,QAAQC,IAAI,UADL,IAGCnB,EAAW0B,KAAK7B,MAAhBG,OAER,OACE1B,EAAAC,EAAAC,cAAA,OAAKE,UAAYsB,EAAS,MAAQ,eAC9BA,EAAS0B,KAAKN,gBAAkB,kBAjDxBO,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,KAAK,SAAA6B,GACjCA,EAAaC","file":"static/js/main.669641b8.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport LinesEllipsis from 'react-lines-ellipsis'\r\nimport './Movie.css';\r\n\r\nfunction Movie( { title, poster, genres, synopsis } ) {\r\n    return (\r\n        <div className=\"Movie\">\r\n            <div className=\"Movie_Columns\">\r\n                <MoviePoster poster={poster} alt={title} />\r\n            </div>\r\n            <div className=\"Movie_Columns\">\r\n                <h1>{title}</h1>\r\n                <div className=\"Movie_Genres\">\r\n                    {genres.map((genre, index) => <MovieGenre genre={genre} key={index} />)}\r\n                </div>\r\n                <p className=\"Movie_Synopsis\">\r\n                    <LinesEllipsis\r\n                        text={synopsis}\r\n                        maxLine='3'\r\n                        ellipsis='...'\r\n                        trimRight\r\n                        baseOn='letters'\r\n                    />\r\n                </p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction MoviePoster({poster, alt}) {\r\n    return (\r\n        <img src={poster} alt={alt} className=\"Movie_Poster\" />\r\n    );\r\n}\r\n\r\nfunction MovieGenre({genre}) {\r\n    return (\r\n        <span className=\"Movie_Genre\">{genre}</span>\r\n    );\r\n}\r\n\r\nMovie.propTypes = {\r\n    title   : PropTypes.string.isRequired,\r\n    poster  : PropTypes.string.isRequired,\r\n    genres  : PropTypes.array.isRequired,\r\n    synopsis: PropTypes.string.isRequired\r\n}\r\n\r\nMoviePoster.propTypes = {\r\n    poster: PropTypes.string.isRequired,\r\n    alt   : PropTypes.string.isRequired\r\n}\r\n\r\nMovieGenre.propTypes = {\r\n    genre: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Movie;","import React, { Component } from 'react';\nimport './App.css';\nimport Movie from './Movie';\n\nclass App extends Component {\n\n  state = { }\n\n  componentWillUnmount() {\n    console.log('componentWillUnmount');\n  }\n\n  _getMovies = async () => {\n    const movies = await this._callApi();\n    this.setState({\n      movies: movies\n    })\n  }\n\n  _callApi = () => {\n    return fetch('https://yts.am/api/v2/list_movies.json?sort_by=download_count')\n    .then(response => response.json())\n    .then(json => json.data.movies)\n    .catch(err => console.log(err));\n  }\n\n  _renderMovies = () => {\n    \n    const movies =  this.state.movies.map(movie => {\n      console.log(movie);\n      return <Movie title={movie.title_english} \n                    poster={movie.small_cover_image} \n                    key={movie.id} \n                    genres={movie.genres}\n                    synopsis={movie.synopsis} />\n    });\n\n    return movies;\n  }\n\n  componentDidMount() {\n    console.log('componentDidMount');\n\n    this._getMovies();\n  }\n\n  render() {\n    console.log('render');\n\n    const { movies } = this.state;\n\n    return (\n      <div className={ movies ? \"App\" : \"App-loading\" }>\n        { movies ? this._renderMovies() : 'Loading' }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}